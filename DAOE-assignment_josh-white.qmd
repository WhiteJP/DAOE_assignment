---
title: "DAOE Assignment"
subtitle: "MIT Sloan School of Management"
date: '15 November 2023'
author: "Joshua White"
format: pdf
---

## Set up 

### Load packages

```{r}
library(tidyverse)
library(DeclareDesign)
library(quickblock)
library(scclust)
```

### Load data

```{r}
data <- readr::read_csv(
  "mt_baseline_data.csv",
  col_types = cols(
    educ_cat = col_factor(),
    #educ_cat = col_factor(
    #  levels = c("High school or less", "Some college", "College degree", "Post-graduate degree"),
    #  ordered = TRUE
    #),
    ideo = col_factor(), #col_number(),
    income_cat = col_factor(),
    race = col_factor()
  )
)

#data$educ_cat <- as.numeric(data$educ_cat)
```

### Define functions

```{r}
draw_data <- function(N) {
  Y_Z_0 <- Y_Z_1 <- data$y # under null hypothesis
  block <- quickblock(as.data.frame(data[, c("party", "ideo", "age", "educ_cat")]), 8) %>%  unclass()
  rows <- sample.int(nrow(data), N)
  cbind(data[rows, ], block, Y_Z_1, Y_Z_0)
}

```

### Set parameters

```{r}
N <- 1000
trt <- 1/4
```


## Simulations

### Setup model, inquiry and estimators with `declareDesign`

```{r}
base_design <- 
  declare_model(
    N = N,
    handler = draw_data
  ) +
  declare_inquiry(
    SATE = mean(Y_Z_1 - Y_Z_0)
  )

estimators <- declare_estimator(y ~ Z, label = "diff in means" ) +
  declare_estimator(y ~ Z + party, label = "party reg") +
  declare_estimator(y ~ Z, covariates = ~ party, 
                    .method = estimatr::lm_lin, label = "party reg - Lin") +
  declare_estimator(y ~ Z + factor(party), label = "party reg - factors") +
  declare_estimator(y ~ Z + factor(block), label = "block reg")


```

### Simulations with Bernouilli assignment

## Bernoulli

```{r}
design_bernoulli <- base_design + 
  declare_assignment(
    Z = simple_ra(N = N, prob = trt)
  ) +
  estimators


bernoulli_diagnostics <- diagnose_design(design_bernoulli, sims = 30, bootstrap_sims = 10)
bernoulli_diagnostics

```


## Stratified random sampling blocked on party

```{r}
design_party <- base_design + 
  declare_assignment(
    Z = block_ra(blocks = party, prob = trt)
  ) +
  estimators


party_diagnostics <- diagnose_design(design_party, sims = 30, bootstrap_sims = 30)
party_diagnostics

```

## Stratified random sampling blocked on 

```{r}
design_block <- base_design + 
  declare_assignment(
    Z = block_ra(blocks = block, prob = trt)
  ) +
  estimators

block_diagnostics <- diagnose_design(design_block, sims = 30, bootstrap_sims = 30)
block_diagnostics

```
## Plot to compare

```{r}
compare_diagnoses(design_bernoulli, design_party)

comparison_data <-
  bind_rows(bernoulli_diagnostics$diagnosands_df, 
            party_diagnostics$diagnosands_df, 
            block_diagnostics$diagnosands_df) %>% 
  rename(SD = "sd_estimate", `se(SD)` = "se(sd_estimate)") %>% 
  pivot_longer(
    cols = c(mean_estimate, bias, SD, rmse, power, coverage),
    names_to = "diagnosand",
    values_to = "value"
  ) %>% 
  pivot_longer(
    cols = contains("se"),
    names_to = "se_diagnosand",
    values_to = "se",
    names_pattern = "se\\((.*)\\)",
  ) %>% 
  filter(diagnosand == se_diagnosand) %>% 
  filter(!diagnosand %in% c("mean_estimate", "rmse", "power")) %>% 
  select(-se_diagnosand)

comparison_data[comparison_data$diagnosand == "coverage", "se"] <- NA

#ADD in confidence interval width

comparison_data %>% 
  ggplot(aes(y = value, x = design)) +
  geom_point() +
  geom_errorbar(aes(ymin = value - se, ymax = value + se), width = .4) +
  ggh4x::facet_grid2(estimator~diagnosand, scales = "free_y", independent = "y") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))


```
